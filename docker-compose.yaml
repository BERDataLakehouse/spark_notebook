# Docker Compose configuration for testing BERDL Spark Notebook
# This docker-compose is for developer convenience, not for running in production.
#
# INSTRUCTIONS:
# =============
#
# 1. AUTHENTICATION SETUP:
#    - Update KBASE_AUTH_TOKEN in spark-notebook service with your KBase CI auth token
#    - Update NB_USER in spark-notebook service with your KBase CI username associated
#      with the auth token above
#
# 2. USING LOCAL SOURCE CODE:
#    For each service, if you have cloned the corresponding repositories at the same
#    level as spark-notebook directory, you can:
#    - Comment out the 'image:' line (if present)
#    - Uncomment the 'build:' section to build from local Dockerfile
#
#    Example for minio-manager-service:
#    # image: ghcr.io/kbase/cdm-minio-service:latest-rc  # <- Comment this out
#       build:                                              # <- Uncomment this
#         context: ../minio_manager_service                 # <- And its contents
#         dockerfile: Dockerfile
#
#    This applies to: spark-master, spark-worker, hive-metastore
#
# 3. DEFAULT CREDENTIALS:
#    - MinIO: minio/minio123 (configured in minio and minio-manager-service)
#    - PostgreSQL: hive/hivepassword (configured in postgres and hive-metastore)

services:
  spark-notebook:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BASE_TAG: local
        BASE_REGISTRY: ""
    platform: linux/amd64
    ports:
      - "8888:8888"  # Jupyter notebook
    environment:
      # CORE BERDL CONFIGURATION
      - CDM_TASK_SERVICE_URL=http://localhost:8080
      - SPARK_CLUSTER_MANAGER_API_URL=http://localhost:8000
      - SPARK_MASTER_URL=spark://spark-master:7077
      - BERDL_POD_IP=spark-notebook
      - BERDL_HIVE_METASTORE_URI=thrift://hive-metastore:9083

      # MINIO CONFIGURATION
      - MINIO_ENDPOINT_URL=minio:9002

      # DATA GOVERNANCE CONFIGURATION
      - GOVERNANCE_API_URL=http://minio-manager-service:8000

      # AUTHENTICATION CONFIGURATION
      - KBASE_AUTH_TOKEN=YOUR_CI_KBASE_AUTH_TOKEN # <- Update this with your KBase CI auth token
      - NB_USER=YOUR_CI_KBASE_USERNAME # <- Update this with your KBase CI username associated with the auth token above

    depends_on:
      - spark-master
      - minio
      - postgres
      - hive-metastore
    command: start-notebook.py --NotebookApp.token='' --NotebookApp.password=''

  minio-manager-service:
    # image: ghcr.io/kbase/cdm-minio-service:latest-rc
    build:
      context: ../minio_manager_service
      dockerfile: Dockerfile
    platform: linux/amd64
    ports:
      - "8003:8000"
    environment:
      - MINIO_ENDPOINT=http://minio:9002
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
      - KBASE_AUTH_URL=https://ci.kbase.us/services/auth/
      - KBASE_ADMIN_ROLES=CDM_JUPYTERHUB_ADMIN
      - REDIS_URL=redis://redis:6379

  spark-master:
    # image: ghcr.io/berdatalakehouse/kube_spark_manager_image:main
    build:
      context: ../kube_spark_manager_image
      dockerfile: Dockerfile
    platform: linux/amd64
    ports:
      - "8090:8080"  # Spark Master Web UI
      - "7077:7077"  # Spark Master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=0.0.0.0
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8080

  spark-worker:
    # image: ghcr.io/berdatalakehouse/kube_spark_manager_image:main
    build:
      context: ../kube_spark_manager_image
      dockerfile: Dockerfile
    platform: linux/amd64
    ports:
      - "8081:8081"  # Spark Worker Web UI
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=4
      - SPARK_WORKER_MEMORY=2g
      - SPARK_WORKER_PORT=8081
      - SPARK_WORKER_WEBUI_PORT=8081
      - BERDL_REDIS_HOST=redis
      - BERDL_REDIS_PORT=6379
      - BERDL_DELTALAKE_WAREHOUSE_DIRECTORY_PATH=s3a://cdm-lake/users-sql-warehouse
      - BERDL_HIVE_METASTORE_URI=thrift://hive-metastore:9083
    depends_on:
      - spark-master

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

  postgres:
    image: postgres:16.3
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=hive
      - POSTGRES_PASSWORD=hivepassword
      - POSTGRES_DB=hive
    volumes:
      - postgres_data:/var/lib/postgresql/data

  hive-metastore:
    # image: ghcr.io/berdatalakehouse/hive_metastore:main
    build:
      context: ../hive_metastore
      dockerfile: Dockerfile
      args:
        # IMPORTANT: Spark 4.0.0 is only officially compatible with Hive Metastore 4.0.0
        # Using newer Hive versions (4.1.0+) causes Thrift protocol incompatibilities
        HIVE_IMAGE_TAG: "4.0.0"
    platform: linux/amd64
    ports:
      - "9083:9083"
    environment:
      # PostgreSQL database configuration
      - POSTGRES_DB=hive
      - POSTGRES_USER=hive
      - POSTGRES_PASSWORD=hivepassword
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      
      # MinIO S3 configuration
      - S3_ENDPOINT=http://minio:9002
      - S3_ACCESS_KEY=minio
      - S3_SECRET_KEY=minio123

      - DELTALAKE_WAREHOUSE_DIR=s3a://cdm-lake/users-sql-warehouse
    depends_on:
      - postgres
      - minio
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9083"]
      interval: 30s
      timeout: 10s
      retries: 3

  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z-cpuv1
    ports:
      - "9002:9002"  # MinIO API
      - "9003:9003"  # MinIO Console
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9002' || exit 1
      interval: 1s
      timeout: 10s
      retries: 5
    command: server --address 0.0.0.0:9002 --console-address 0.0.0.0:9003 /data
    volumes:
      - minio_data:/data

volumes:
  postgres_data:
  minio_data:
  redis_data: