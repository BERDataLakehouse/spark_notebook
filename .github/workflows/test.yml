name: Test Notebook Utils

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t spark-notebook-test . || {
            echo "Docker build failed. This might be due to network issues or base image availability."
            echo "Checking if base image exists..."
            docker pull ghcr.io/berdatalakehouse/spark_notebook_base:main || echo "Base image pull failed"
            exit 1
          }
          
      - name: Create test script
        run: |
          cat > test_notebook_utils.py << 'EOF'
          #!/usr/bin/env python3
          """
          Test script to validate 00-notebookutils.py imports work correctly.
          This script runs inside the container and tests the notebook utilities.
          """
          import sys
          import os
          import traceback
          from unittest.mock import patch, MagicMock

          def test_imports():
              """Test that all imports in 00-notebookutils.py work without errors."""
              print("Testing imports from 00-notebookutils.py...")
              
              # Set up test environment variables
              test_env = {
                  "KBASE_AUTH_TOKEN": "test-token-123",
                  "CDM_TASK_SERVICE_URL": "https://ci.kbase.us/services/ctsfake",
                  "MINIO_ENDPOINT": "http://localhost:9000",
                  "MINIO_ACCESS_KEY": "minioadmin",
                  "MINIO_SECRET_KEY": "minioadmin",
                  "MINIO_SECURE": "false",
                  "MINIO_SECURE_FLAG": "false",
                  "BERDL_POD_IP": "192.168.1.100",
                  "SPARK_MASTER_URL": "spark://localhost:7077",
                  "SPARK_JOB_LOG_DIR_CATEGORY": "test-user",
                  "BERDL_HIVE_METASTORE_URI": "thrift://localhost:9083",
                  "SPARK_CLUSTER_MANAGER_API_URL": "http://localhost:8000",
                  "GOVERNANCE_API_URL": "http://localhost:8000",
                  "USER": "test-user",
              }
              
              # Set environment variables
              for key, value in test_env.items():
                  os.environ[key] = value
              
              print(f"✓ Set {len(test_env)} environment variables")
              
              try:
                  # Check if the notebook utils file exists
                  notebook_file = '/configs/ipython_startup/00-notebookutils.py'
                  if not os.path.exists(notebook_file):
                      print(f"✗ File not found: {notebook_file}")
                      print("Available files in /configs/ipython_startup/:")
                      if os.path.exists('/configs/ipython_startup'):
                          for f in os.listdir('/configs/ipython_startup'):
                              print(f"  - {f}")
                      return False
                  
                  print(f"✓ Found notebook file: {notebook_file}")
                  
                  # Add the path to Python path
                  sys.path.insert(0, '/home')  # Add the working directory
                  
                  # Try to import individual components first to see what works
                  print("Testing individual imports...")
                  
                  try:
                      from berdl_notebook_utils.berdl_settings import BERDLSettings, get_settings
                      print("✓ Successfully imported BERDLSettings")
                  except Exception as e:
                      print(f"⚠ Warning: Could not import BERDLSettings: {e}")
                  
                  # Mock the client creation functions to prevent network calls
                  with patch('berdl_notebook_utils.clients.get_minio_client') as mock_minio, \
                       patch('berdl_notebook_utils.clients.get_task_service_client') as mock_task, \
                       patch('berdl_notebook_utils.clients.get_governance_client') as mock_governance, \
                       patch('berdl_notebook_utils.clients.get_spark_cluster_client') as mock_spark:
                      
                      # Set up mock return values
                      mock_minio.return_value = MagicMock()
                      mock_task.return_value = MagicMock()
                      mock_governance.return_value = MagicMock()
                      mock_spark.return_value = MagicMock()
                      
                      print("✓ Set up mocks for external clients")
                      
                      # Read and execute the notebook utilities code
                      print("Executing 00-notebookutils.py...")
                      with open(notebook_file, 'r') as f:
                          notebook_code = f.read()
                      
                      print(f"✓ Read {len(notebook_code)} characters from notebook file")
                      
                      # Execute the notebook utilities code in a controlled environment
                      exec_globals = {
                          '__name__': '__main__',
                          '__file__': notebook_file,
                          '__builtins__': __builtins__
                      }
                      
                      exec(compile(notebook_code, notebook_file, 'exec'), exec_globals)
                      print("✓ Successfully executed 00-notebookutils.py")
                      
                      # Verify that the expected variables are created
                      expected_vars = ['governance', 'minio', 'task_service', 'spark_cluster']
                      for var in expected_vars:
                          if var in exec_globals:
                              print(f"✓ Variable '{var}' created successfully")
                          else:
                              print(f"⚠ Warning: Expected variable '{var}' not found")
                      
                      return True
                      
              except Exception as e:
                  print(f"✗ Error testing imports: {e}")
                  print("Traceback:")
                  traceback.print_exc()
                  return False

          def main():
              """Main test function."""
              print("Starting notebook utils test...")
              print(f"Python version: {sys.version}")
              print(f"Python path: {sys.path}")
              print(f"Current working directory: {os.getcwd()}")
              
              success = test_imports()
              
              if success:
                  print("\n✓ All tests passed!")
                  sys.exit(0)
              else:
                  print("\n✗ Tests failed!")
                  sys.exit(1)

          if __name__ == "__main__":
              main()
          EOF
          
      - name: Run container test
        run: |
          echo "Running test inside container..."
          docker run --rm \
            -v $(pwd)/test_notebook_utils.py:/test_notebook_utils.py \
            spark-notebook-test \
            python /test_notebook_utils.py
            
  test-without-container:
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
          
      - name: Set up Python
        run: uv python install 3.12
        
      - name: Install dependencies and run test
        run: |
          cd notebook_utils
          uv sync --inexact --group dev
          
          # Create a test that verifies the notebook utils can be imported and executed
          cat > test_notebook_standalone.py << 'EOF'
          #!/usr/bin/env python3
          import os
          import sys
          from unittest.mock import patch, MagicMock
          
          # Set test environment variables
          test_env = {
              "KBASE_AUTH_TOKEN": "test-token-123",
              "CDM_TASK_SERVICE_URL": "https://ci.kbase.us/services/ctsfake",
              "MINIO_ENDPOINT": "http://localhost:9000",
              "MINIO_ACCESS_KEY": "minioadmin",
              "MINIO_SECRET_KEY": "minioadmin",
              "MINIO_SECURE": "false",
              "BERDL_POD_IP": "192.168.1.100",
              "SPARK_MASTER_URL": "spark://localhost:7077",
              "SPARK_JOB_LOG_DIR_CATEGORY": "test-user",
              "BERDL_HIVE_METASTORE_URI": "thrift://localhost:9083",
              "SPARK_CLUSTER_MANAGER_API_URL": "http://localhost:8000",
              "GOVERNANCE_API_URL": "http://localhost:8000",
              "USER": "test-user",
          }
          
          for key, value in test_env.items():
              os.environ[key] = value
          
          print("Testing notebook utilities imports and execution...")
          
          # Test imports with mocking
          try:
              with patch('berdl_notebook_utils.clients.get_minio_client') as mock_minio, \
                   patch('berdl_notebook_utils.clients.get_task_service_client') as mock_task, \
                   patch('berdl_notebook_utils.clients.get_governance_client') as mock_governance, \
                   patch('berdl_notebook_utils.clients.get_spark_cluster_client') as mock_spark:
                  
                  mock_minio.return_value = MagicMock()
                  mock_task.return_value = MagicMock()
                  mock_governance.return_value = MagicMock()
                  mock_spark.return_value = MagicMock()
                  
                  print("✓ Set up mocks successfully")
                  
                  # Test the notebook utilities file
                  notebook_file = '../configs/ipython_startup/00-notebookutils.py'
                  with open(notebook_file, 'r') as f:
                      notebook_code = f.read()
                  
                  print(f"✓ Read notebook file ({len(notebook_code)} chars)")
                  
                  exec_globals = {
                      '__name__': '__main__',
                      '__file__': notebook_file,
                      '__builtins__': __builtins__
                  }
                  
                  exec(compile(notebook_code, notebook_file, 'exec'), exec_globals)
                  print("✓ Successfully executed 00-notebookutils.py")
                  
                  # Check that expected variables were created
                  expected_vars = ['governance', 'minio', 'task_service', 'spark_cluster']
                  found_vars = []
                  for var in expected_vars:
                      if var in exec_globals:
                          found_vars.append(var)
                          print(f"✓ Variable '{var}' created successfully")
                      else:
                          print(f"⚠ Variable '{var}' not found")
                  
                  if len(found_vars) >= 2:  # At least 2 variables should be created
                      print(f"✓ Test passed: Created {len(found_vars)}/{len(expected_vars)} expected variables")
                  else:
                      print(f"✗ Test failed: Only created {len(found_vars)}/{len(expected_vars)} expected variables")
                      sys.exit(1)
                  
          except Exception as e:
              print(f"✗ Test failed: {e}")
              import traceback
              traceback.print_exc()
              sys.exit(1)
          
          print("✓ All standalone tests passed!")
          EOF
          
          uv run python test_notebook_standalone.py